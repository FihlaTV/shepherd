# source: http://localhost:4466
# timestamp: Tue Aug 14 2018 19:11:12 GMT-0500 (GMT-05:00)

type AggregateAppointment {
  count: Int!
}

type AggregateInstruction {
  count: Int!
}

type AggregateSitter {
  count: Int!
}

type AggregateSitterRate {
  count: Int!
}

type AggregateTimeInterval {
  count: Int!
}

type AggregateTodoList {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Appointment implements Node {
  id: ID!
  time(where: TimeIntervalWhereInput): TimeInterval!
  user(where: UserWhereInput): User!
  sitter(where: SitterWhereInput): Sitter!
  comment: String!
  rating: Int
  pending: Boolean!
}

"""A connection to a list of items."""
type AppointmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AppointmentEdge]!
  aggregate: AggregateAppointment!
}

input AppointmentCreateInput {
  comment: String!
  rating: Int
  pending: Boolean!
  time: TimeIntervalCreateOneInput!
  user: UserCreateOneInput!
  sitter: SitterCreateOneInput!
}

"""An edge in a connection."""
type AppointmentEdge {
  """The item at the end of the edge."""
  node: Appointment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AppointmentOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  rating_ASC
  rating_DESC
  pending_ASC
  pending_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AppointmentPreviousValues {
  id: ID!
  comment: String!
  rating: Int
  pending: Boolean!
}

type AppointmentSubscriptionPayload {
  mutation: MutationType!
  node: Appointment
  updatedFields: [String!]
  previousValues: AppointmentPreviousValues
}

input AppointmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AppointmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AppointmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AppointmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AppointmentWhereInput
}

input AppointmentUpdateInput {
  comment: String
  rating: Int
  pending: Boolean
  time: TimeIntervalUpdateOneInput
  user: UserUpdateOneInput
  sitter: SitterUpdateOneInput
}

input AppointmentWhereInput {
  """Logical AND on all given filters."""
  AND: [AppointmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [AppointmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AppointmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  comment: String

  """All values that are not equal to given value."""
  comment_not: String

  """All values that are contained in given list."""
  comment_in: [String!]

  """All values that are not contained in given list."""
  comment_not_in: [String!]

  """All values less than the given value."""
  comment_lt: String

  """All values less than or equal the given value."""
  comment_lte: String

  """All values greater than the given value."""
  comment_gt: String

  """All values greater than or equal the given value."""
  comment_gte: String

  """All values containing the given string."""
  comment_contains: String

  """All values not containing the given string."""
  comment_not_contains: String

  """All values starting with the given string."""
  comment_starts_with: String

  """All values not starting with the given string."""
  comment_not_starts_with: String

  """All values ending with the given string."""
  comment_ends_with: String

  """All values not ending with the given string."""
  comment_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  pending: Boolean

  """All values that are not equal to given value."""
  pending_not: Boolean
  time: TimeIntervalWhereInput
  user: UserWhereInput
  sitter: SitterWhereInput
}

input AppointmentWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

type Instruction implements Node {
  id: ID!
  list(where: TodoListWhereInput): TodoList!
  time(where: TimeIntervalWhereInput): TimeInterval!
  desc: String!
}

"""A connection to a list of items."""
type InstructionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InstructionEdge]!
  aggregate: AggregateInstruction!
}

input InstructionCreateInput {
  desc: String!
  list: TodoListCreateOneInput!
  time: TimeIntervalCreateOneInput!
}

"""An edge in a connection."""
type InstructionEdge {
  """The item at the end of the edge."""
  node: Instruction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InstructionOrderByInput {
  id_ASC
  id_DESC
  desc_ASC
  desc_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InstructionPreviousValues {
  id: ID!
  desc: String!
}

type InstructionSubscriptionPayload {
  mutation: MutationType!
  node: Instruction
  updatedFields: [String!]
  previousValues: InstructionPreviousValues
}

input InstructionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstructionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstructionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstructionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InstructionWhereInput
}

input InstructionUpdateInput {
  desc: String
  list: TodoListUpdateOneInput
  time: TimeIntervalUpdateOneInput
}

input InstructionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstructionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstructionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstructionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
  list: TodoListWhereInput
  time: TimeIntervalWhereInput
}

input InstructionWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createInstruction(data: InstructionCreateInput!): Instruction!
  createAppointment(data: AppointmentCreateInput!): Appointment!
  createTodoList(data: TodoListCreateInput!): TodoList!
  createSitter(data: SitterCreateInput!): Sitter!
  createUser(data: UserCreateInput!): User!
  createSitterRate(data: SitterRateCreateInput!): SitterRate!
  createTimeInterval(data: TimeIntervalCreateInput!): TimeInterval!
  updateInstruction(data: InstructionUpdateInput!, where: InstructionWhereUniqueInput!): Instruction
  updateAppointment(data: AppointmentUpdateInput!, where: AppointmentWhereUniqueInput!): Appointment
  updateTodoList(data: TodoListUpdateInput!, where: TodoListWhereUniqueInput!): TodoList
  updateSitter(data: SitterUpdateInput!, where: SitterWhereUniqueInput!): Sitter
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteInstruction(where: InstructionWhereUniqueInput!): Instruction
  deleteAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteTodoList(where: TodoListWhereUniqueInput!): TodoList
  deleteSitter(where: SitterWhereUniqueInput!): Sitter
  deleteUser(where: UserWhereUniqueInput!): User
  upsertInstruction(where: InstructionWhereUniqueInput!, create: InstructionCreateInput!, update: InstructionUpdateInput!): Instruction!
  upsertAppointment(where: AppointmentWhereUniqueInput!, create: AppointmentCreateInput!, update: AppointmentUpdateInput!): Appointment!
  upsertTodoList(where: TodoListWhereUniqueInput!, create: TodoListCreateInput!, update: TodoListUpdateInput!): TodoList!
  upsertSitter(where: SitterWhereUniqueInput!, create: SitterCreateInput!, update: SitterUpdateInput!): Sitter!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyInstructions(data: InstructionUpdateInput!, where: InstructionWhereInput): BatchPayload!
  updateManyAppointments(data: AppointmentUpdateInput!, where: AppointmentWhereInput): BatchPayload!
  updateManyTodoLists(data: TodoListUpdateInput!, where: TodoListWhereInput): BatchPayload!
  updateManySitters(data: SitterUpdateInput!, where: SitterWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManySitterRates(data: SitterRateUpdateInput!, where: SitterRateWhereInput): BatchPayload!
  updateManyTimeIntervals(data: TimeIntervalUpdateInput!, where: TimeIntervalWhereInput): BatchPayload!
  deleteManyInstructions(where: InstructionWhereInput): BatchPayload!
  deleteManyAppointments(where: AppointmentWhereInput): BatchPayload!
  deleteManyTodoLists(where: TodoListWhereInput): BatchPayload!
  deleteManySitters(where: SitterWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManySitterRates(where: SitterRateWhereInput): BatchPayload!
  deleteManyTimeIntervals(where: TimeIntervalWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  instructions(where: InstructionWhereInput, orderBy: InstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Instruction]!
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment]!
  todoLists(where: TodoListWhereInput, orderBy: TodoListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TodoList]!
  sitters(where: SitterWhereInput, orderBy: SitterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sitter]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  sitterRates(where: SitterRateWhereInput, orderBy: SitterRateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SitterRate]!
  timeIntervals(where: TimeIntervalWhereInput, orderBy: TimeIntervalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeInterval]!
  instruction(where: InstructionWhereUniqueInput!): Instruction
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  todoList(where: TodoListWhereUniqueInput!): TodoList
  sitter(where: SitterWhereUniqueInput!): Sitter
  user(where: UserWhereUniqueInput!): User
  instructionsConnection(where: InstructionWhereInput, orderBy: InstructionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstructionConnection!
  appointmentsConnection(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppointmentConnection!
  todoListsConnection(where: TodoListWhereInput, orderBy: TodoListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TodoListConnection!
  sittersConnection(where: SitterWhereInput, orderBy: SitterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SitterConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  sitterRatesConnection(where: SitterRateWhereInput, orderBy: SitterRateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SitterRateConnection!
  timeIntervalsConnection(where: TimeIntervalWhereInput, orderBy: TimeIntervalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeIntervalConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Sitter implements Node {
  id: ID!
  bio: String!
  rates(where: SitterRateWhereInput): SitterRate!
  hours(where: TimeIntervalWhereInput, orderBy: TimeIntervalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeInterval!]
}

"""A connection to a list of items."""
type SitterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SitterEdge]!
  aggregate: AggregateSitter!
}

input SitterCreateInput {
  bio: String!
  rates: SitterRateCreateOneInput!
  hours: TimeIntervalCreateManyInput
}

input SitterCreateOneInput {
  create: SitterCreateInput
  connect: SitterWhereUniqueInput
}

"""An edge in a connection."""
type SitterEdge {
  """The item at the end of the edge."""
  node: Sitter!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SitterOrderByInput {
  id_ASC
  id_DESC
  bio_ASC
  bio_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SitterPreviousValues {
  id: ID!
  bio: String!
}

type SitterRate {
  child_rate: Float
  child_addl: Float
  pet_rate: Float
  pet_addl: Float
  home_rate: Float
  home_addl: Float
}

"""A connection to a list of items."""
type SitterRateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SitterRateEdge]!
  aggregate: AggregateSitterRate!
}

input SitterRateCreateInput {
  child_rate: Float
  child_addl: Float
  pet_rate: Float
  pet_addl: Float
  home_rate: Float
  home_addl: Float
}

input SitterRateCreateOneInput {
  create: SitterRateCreateInput
}

"""An edge in a connection."""
type SitterRateEdge {
  """The item at the end of the edge."""
  node: SitterRate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SitterRateOrderByInput {
  child_rate_ASC
  child_rate_DESC
  child_addl_ASC
  child_addl_DESC
  pet_rate_ASC
  pet_rate_DESC
  pet_addl_ASC
  pet_addl_DESC
  home_rate_ASC
  home_rate_DESC
  home_addl_ASC
  home_addl_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SitterRatePreviousValues {
  child_rate: Float
  child_addl: Float
  pet_rate: Float
  pet_addl: Float
  home_rate: Float
  home_addl: Float
}

type SitterRateSubscriptionPayload {
  mutation: MutationType!
  node: SitterRate
  updatedFields: [String!]
  previousValues: SitterRatePreviousValues
}

input SitterRateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SitterRateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SitterRateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SitterRateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SitterRateWhereInput
}

input SitterRateUpdateDataInput {
  child_rate: Float
  child_addl: Float
  pet_rate: Float
  pet_addl: Float
  home_rate: Float
  home_addl: Float
}

input SitterRateUpdateInput {
  child_rate: Float
  child_addl: Float
  pet_rate: Float
  pet_addl: Float
  home_rate: Float
  home_addl: Float
}

input SitterRateUpdateOneInput {
  create: SitterRateCreateInput
  delete: Boolean
  update: SitterRateUpdateDataInput
  upsert: SitterRateUpsertNestedInput
}

input SitterRateUpsertNestedInput {
  update: SitterRateUpdateDataInput!
  create: SitterRateCreateInput!
}

input SitterRateWhereInput {
  """Logical AND on all given filters."""
  AND: [SitterRateWhereInput!]

  """Logical OR on all given filters."""
  OR: [SitterRateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SitterRateWhereInput!]
  child_rate: Float

  """All values that are not equal to given value."""
  child_rate_not: Float

  """All values that are contained in given list."""
  child_rate_in: [Float!]

  """All values that are not contained in given list."""
  child_rate_not_in: [Float!]

  """All values less than the given value."""
  child_rate_lt: Float

  """All values less than or equal the given value."""
  child_rate_lte: Float

  """All values greater than the given value."""
  child_rate_gt: Float

  """All values greater than or equal the given value."""
  child_rate_gte: Float
  child_addl: Float

  """All values that are not equal to given value."""
  child_addl_not: Float

  """All values that are contained in given list."""
  child_addl_in: [Float!]

  """All values that are not contained in given list."""
  child_addl_not_in: [Float!]

  """All values less than the given value."""
  child_addl_lt: Float

  """All values less than or equal the given value."""
  child_addl_lte: Float

  """All values greater than the given value."""
  child_addl_gt: Float

  """All values greater than or equal the given value."""
  child_addl_gte: Float
  pet_rate: Float

  """All values that are not equal to given value."""
  pet_rate_not: Float

  """All values that are contained in given list."""
  pet_rate_in: [Float!]

  """All values that are not contained in given list."""
  pet_rate_not_in: [Float!]

  """All values less than the given value."""
  pet_rate_lt: Float

  """All values less than or equal the given value."""
  pet_rate_lte: Float

  """All values greater than the given value."""
  pet_rate_gt: Float

  """All values greater than or equal the given value."""
  pet_rate_gte: Float
  pet_addl: Float

  """All values that are not equal to given value."""
  pet_addl_not: Float

  """All values that are contained in given list."""
  pet_addl_in: [Float!]

  """All values that are not contained in given list."""
  pet_addl_not_in: [Float!]

  """All values less than the given value."""
  pet_addl_lt: Float

  """All values less than or equal the given value."""
  pet_addl_lte: Float

  """All values greater than the given value."""
  pet_addl_gt: Float

  """All values greater than or equal the given value."""
  pet_addl_gte: Float
  home_rate: Float

  """All values that are not equal to given value."""
  home_rate_not: Float

  """All values that are contained in given list."""
  home_rate_in: [Float!]

  """All values that are not contained in given list."""
  home_rate_not_in: [Float!]

  """All values less than the given value."""
  home_rate_lt: Float

  """All values less than or equal the given value."""
  home_rate_lte: Float

  """All values greater than the given value."""
  home_rate_gt: Float

  """All values greater than or equal the given value."""
  home_rate_gte: Float
  home_addl: Float

  """All values that are not equal to given value."""
  home_addl_not: Float

  """All values that are contained in given list."""
  home_addl_in: [Float!]

  """All values that are not contained in given list."""
  home_addl_not_in: [Float!]

  """All values less than the given value."""
  home_addl_lt: Float

  """All values less than or equal the given value."""
  home_addl_lte: Float

  """All values greater than the given value."""
  home_addl_gt: Float

  """All values greater than or equal the given value."""
  home_addl_gte: Float
}

type SitterSubscriptionPayload {
  mutation: MutationType!
  node: Sitter
  updatedFields: [String!]
  previousValues: SitterPreviousValues
}

input SitterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SitterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SitterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SitterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SitterWhereInput
}

input SitterUpdateDataInput {
  bio: String
  rates: SitterRateUpdateOneInput
  hours: TimeIntervalUpdateManyInput
}

input SitterUpdateInput {
  bio: String
  rates: SitterRateUpdateOneInput
  hours: TimeIntervalUpdateManyInput
}

input SitterUpdateOneInput {
  create: SitterCreateInput
  connect: SitterWhereUniqueInput
  delete: Boolean
  update: SitterUpdateDataInput
  upsert: SitterUpsertNestedInput
}

input SitterUpsertNestedInput {
  update: SitterUpdateDataInput!
  create: SitterCreateInput!
}

input SitterWhereInput {
  """Logical AND on all given filters."""
  AND: [SitterWhereInput!]

  """Logical OR on all given filters."""
  OR: [SitterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SitterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  bio: String

  """All values that are not equal to given value."""
  bio_not: String

  """All values that are contained in given list."""
  bio_in: [String!]

  """All values that are not contained in given list."""
  bio_not_in: [String!]

  """All values less than the given value."""
  bio_lt: String

  """All values less than or equal the given value."""
  bio_lte: String

  """All values greater than the given value."""
  bio_gt: String

  """All values greater than or equal the given value."""
  bio_gte: String

  """All values containing the given string."""
  bio_contains: String

  """All values not containing the given string."""
  bio_not_contains: String

  """All values starting with the given string."""
  bio_starts_with: String

  """All values not starting with the given string."""
  bio_not_starts_with: String

  """All values ending with the given string."""
  bio_ends_with: String

  """All values not ending with the given string."""
  bio_not_ends_with: String
  rates: SitterRateWhereInput
  hours_every: TimeIntervalWhereInput
  hours_some: TimeIntervalWhereInput
  hours_none: TimeIntervalWhereInput
}

input SitterWhereUniqueInput {
  id: ID
}

type Subscription {
  instruction(where: InstructionSubscriptionWhereInput): InstructionSubscriptionPayload
  appointment(where: AppointmentSubscriptionWhereInput): AppointmentSubscriptionPayload
  todoList(where: TodoListSubscriptionWhereInput): TodoListSubscriptionPayload
  sitter(where: SitterSubscriptionWhereInput): SitterSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  sitterRate(where: SitterRateSubscriptionWhereInput): SitterRateSubscriptionPayload
  timeInterval(where: TimeIntervalSubscriptionWhereInput): TimeIntervalSubscriptionPayload
}

type TimeInterval {
  start_time: Int!
  end_time: Int!
  day_of_week: DayOfWeek
}

"""A connection to a list of items."""
type TimeIntervalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeIntervalEdge]!
  aggregate: AggregateTimeInterval!
}

input TimeIntervalCreateInput {
  start_time: Int!
  end_time: Int!
  day_of_week: DayOfWeek
}

input TimeIntervalCreateManyInput {
  create: [TimeIntervalCreateInput!]
}

input TimeIntervalCreateOneInput {
  create: TimeIntervalCreateInput
}

"""An edge in a connection."""
type TimeIntervalEdge {
  """The item at the end of the edge."""
  node: TimeInterval!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimeIntervalOrderByInput {
  start_time_ASC
  start_time_DESC
  end_time_ASC
  end_time_DESC
  day_of_week_ASC
  day_of_week_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TimeIntervalPreviousValues {
  start_time: Int!
  end_time: Int!
  day_of_week: DayOfWeek
}

type TimeIntervalSubscriptionPayload {
  mutation: MutationType!
  node: TimeInterval
  updatedFields: [String!]
  previousValues: TimeIntervalPreviousValues
}

input TimeIntervalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeIntervalSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeIntervalSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeIntervalSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeIntervalWhereInput
}

input TimeIntervalUpdateDataInput {
  start_time: Int
  end_time: Int
  day_of_week: DayOfWeek
}

input TimeIntervalUpdateInput {
  start_time: Int
  end_time: Int
  day_of_week: DayOfWeek
}

input TimeIntervalUpdateManyInput {
  create: [TimeIntervalCreateInput!]
}

input TimeIntervalUpdateOneInput {
  create: TimeIntervalCreateInput
  delete: Boolean
  update: TimeIntervalUpdateDataInput
  upsert: TimeIntervalUpsertNestedInput
}

input TimeIntervalUpsertNestedInput {
  update: TimeIntervalUpdateDataInput!
  create: TimeIntervalCreateInput!
}

input TimeIntervalWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeIntervalWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeIntervalWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeIntervalWhereInput!]
  start_time: Int

  """All values that are not equal to given value."""
  start_time_not: Int

  """All values that are contained in given list."""
  start_time_in: [Int!]

  """All values that are not contained in given list."""
  start_time_not_in: [Int!]

  """All values less than the given value."""
  start_time_lt: Int

  """All values less than or equal the given value."""
  start_time_lte: Int

  """All values greater than the given value."""
  start_time_gt: Int

  """All values greater than or equal the given value."""
  start_time_gte: Int
  end_time: Int

  """All values that are not equal to given value."""
  end_time_not: Int

  """All values that are contained in given list."""
  end_time_in: [Int!]

  """All values that are not contained in given list."""
  end_time_not_in: [Int!]

  """All values less than the given value."""
  end_time_lt: Int

  """All values less than or equal the given value."""
  end_time_lte: Int

  """All values greater than the given value."""
  end_time_gt: Int

  """All values greater than or equal the given value."""
  end_time_gte: Int
  day_of_week: DayOfWeek

  """All values that are not equal to given value."""
  day_of_week_not: DayOfWeek

  """All values that are contained in given list."""
  day_of_week_in: [DayOfWeek!]

  """All values that are not contained in given list."""
  day_of_week_not_in: [DayOfWeek!]
}

type TodoList implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  name: String!
}

"""A connection to a list of items."""
type TodoListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoListEdge]!
  aggregate: AggregateTodoList!
}

input TodoListCreateInput {
  name: String!
  user: UserCreateOneInput!
}

input TodoListCreateOneInput {
  create: TodoListCreateInput
  connect: TodoListWhereUniqueInput
}

"""An edge in a connection."""
type TodoListEdge {
  """The item at the end of the edge."""
  node: TodoList!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TodoListOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TodoListPreviousValues {
  id: ID!
  name: String!
}

type TodoListSubscriptionPayload {
  mutation: MutationType!
  node: TodoList
  updatedFields: [String!]
  previousValues: TodoListPreviousValues
}

input TodoListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TodoListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TodoListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TodoListSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TodoListWhereInput
}

input TodoListUpdateDataInput {
  name: String
  user: UserUpdateOneInput
}

input TodoListUpdateInput {
  name: String
  user: UserUpdateOneInput
}

input TodoListUpdateOneInput {
  create: TodoListCreateInput
  connect: TodoListWhereUniqueInput
  delete: Boolean
  update: TodoListUpdateDataInput
  upsert: TodoListUpsertNestedInput
}

input TodoListUpsertNestedInput {
  update: TodoListUpdateDataInput!
  create: TodoListCreateInput!
}

input TodoListWhereInput {
  """Logical AND on all given filters."""
  AND: [TodoListWhereInput!]

  """Logical OR on all given filters."""
  OR: [TodoListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TodoListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  user: UserWhereInput
}

input TodoListWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  username: String!
  first_name: String!
  last_name: String!
  street_address: String
  city: String
  state: String
  zip_code: Int
  sitter: Boolean
  rating: Int
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  first_name: String!
  last_name: String!
  street_address: String
  city: String
  state: String
  zip_code: Int
  sitter: Boolean
  rating: Int
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  street_address_ASC
  street_address_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_code_ASC
  zip_code_DESC
  sitter_ASC
  sitter_DESC
  rating_ASC
  rating_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  first_name: String!
  last_name: String!
  street_address: String
  city: String
  state: String
  zip_code: Int
  sitter: Boolean
  rating: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  username: String
  first_name: String
  last_name: String
  street_address: String
  city: String
  state: String
  zip_code: Int
  sitter: Boolean
  rating: Int
}

input UserUpdateInput {
  username: String
  first_name: String
  last_name: String
  street_address: String
  city: String
  state: String
  zip_code: Int
  sitter: Boolean
  rating: Int
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  first_name: String

  """All values that are not equal to given value."""
  first_name_not: String

  """All values that are contained in given list."""
  first_name_in: [String!]

  """All values that are not contained in given list."""
  first_name_not_in: [String!]

  """All values less than the given value."""
  first_name_lt: String

  """All values less than or equal the given value."""
  first_name_lte: String

  """All values greater than the given value."""
  first_name_gt: String

  """All values greater than or equal the given value."""
  first_name_gte: String

  """All values containing the given string."""
  first_name_contains: String

  """All values not containing the given string."""
  first_name_not_contains: String

  """All values starting with the given string."""
  first_name_starts_with: String

  """All values not starting with the given string."""
  first_name_not_starts_with: String

  """All values ending with the given string."""
  first_name_ends_with: String

  """All values not ending with the given string."""
  first_name_not_ends_with: String
  last_name: String

  """All values that are not equal to given value."""
  last_name_not: String

  """All values that are contained in given list."""
  last_name_in: [String!]

  """All values that are not contained in given list."""
  last_name_not_in: [String!]

  """All values less than the given value."""
  last_name_lt: String

  """All values less than or equal the given value."""
  last_name_lte: String

  """All values greater than the given value."""
  last_name_gt: String

  """All values greater than or equal the given value."""
  last_name_gte: String

  """All values containing the given string."""
  last_name_contains: String

  """All values not containing the given string."""
  last_name_not_contains: String

  """All values starting with the given string."""
  last_name_starts_with: String

  """All values not starting with the given string."""
  last_name_not_starts_with: String

  """All values ending with the given string."""
  last_name_ends_with: String

  """All values not ending with the given string."""
  last_name_not_ends_with: String
  street_address: String

  """All values that are not equal to given value."""
  street_address_not: String

  """All values that are contained in given list."""
  street_address_in: [String!]

  """All values that are not contained in given list."""
  street_address_not_in: [String!]

  """All values less than the given value."""
  street_address_lt: String

  """All values less than or equal the given value."""
  street_address_lte: String

  """All values greater than the given value."""
  street_address_gt: String

  """All values greater than or equal the given value."""
  street_address_gte: String

  """All values containing the given string."""
  street_address_contains: String

  """All values not containing the given string."""
  street_address_not_contains: String

  """All values starting with the given string."""
  street_address_starts_with: String

  """All values not starting with the given string."""
  street_address_not_starts_with: String

  """All values ending with the given string."""
  street_address_ends_with: String

  """All values not ending with the given string."""
  street_address_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip_code: Int

  """All values that are not equal to given value."""
  zip_code_not: Int

  """All values that are contained in given list."""
  zip_code_in: [Int!]

  """All values that are not contained in given list."""
  zip_code_not_in: [Int!]

  """All values less than the given value."""
  zip_code_lt: Int

  """All values less than or equal the given value."""
  zip_code_lte: Int

  """All values greater than the given value."""
  zip_code_gt: Int

  """All values greater than or equal the given value."""
  zip_code_gte: Int
  sitter: Boolean

  """All values that are not equal to given value."""
  sitter_not: Boolean
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
}

input UserWhereUniqueInput {
  id: ID
}
